openapi: 3.0.0
info:
  version: 0.9.0
  title: Glean API - Activity
  description: API endpoints for Activity
  x-logo:
    url: https://app.glean.com/images/glean-text2.svg
  x-speakeasy-name: Glean API
servers:
  - url: https://{instance}-be.glean.com
    variables:
      instance:
        default: instance-name
        description: The instance name (typically the email domain without the TLD) that determines the deployment backend.
security:
  - APIToken: []
paths:
  /rest/api/v1/activity:
    post:
      tags:
        - Activity
      summary: Report document activity
      description: Report user activity that occurs on indexed documents such as viewing or editing. This signal improves search quality.
      operationId: activity
      x-visibility: Public
      x-codegen-request-body-name: payload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
        required: true
        x-exportParamName: Activity
      responses:
        '200':
          description: OK
        '400':
          description: Invalid request
        '401':
          description: Not Authorized
        '429':
          description: Too Many Requests
      x-speakeasy-name-override: report
      x-speakeasy-group: client.activity
      x-codeSamples:
        - lang: Python
          label: Python (API Client)
          source: |-
            from glean.api_client import Glean, models
            from glean.api_client.utils import parse_datetime
            import os


            with Glean(
                api_token=os.getenv("GLEAN_API_TOKEN", ""),
                instance=os.getenv("GLEAN_INSTANCE", ""),
            ) as glean:

                glean.client.activity.report(events=[
                    {
                        "action": models.ActivityEventAction.HISTORICAL_VIEW,
                        "timestamp": parse_datetime("2000-01-23T04:56:07.000Z"),
                        "url": "https://example.com/",
                    },
                    {
                        "action": models.ActivityEventAction.SEARCH,
                        "params": {
                            "query": "query",
                        },
                        "timestamp": parse_datetime("2000-01-23T04:56:07.000Z"),
                        "url": "https://example.com/search?q=query",
                    },
                    {
                        "action": models.ActivityEventAction.VIEW,
                        "params": {
                            "duration": 20,
                            "referrer": "https://example.com/document",
                        },
                        "timestamp": parse_datetime("2000-01-23T04:56:07.000Z"),
                        "url": "https://example.com/",
                    },
                ])

                # Use the SDK ...
        - lang: JavaScript
          label: Typescript (API Client)
          source: |-
            import { Glean } from "@gleanwork/api-client";

            const glean = new Glean({
              apiToken: process.env["GLEAN_API_TOKEN"] ?? "",
              instance: process.env["GLEAN_INSTANCE"] ?? "",
            });

            async function run() {
              await glean.client.activity.report({
                events: [
                  {
                    action: "HISTORICAL_VIEW",
                    timestamp: new Date("2000-01-23T04:56:07.000Z"),
                    url: "https://example.com/",
                  },
                  {
                    action: "SEARCH",
                    params: {
                      query: "query",
                    },
                    timestamp: new Date("2000-01-23T04:56:07.000Z"),
                    url: "https://example.com/search?q=query",
                  },
                  {
                    action: "VIEW",
                    params: {
                      duration: 20,
                      referrer: "https://example.com/document",
                    },
                    timestamp: new Date("2000-01-23T04:56:07.000Z"),
                    url: "https://example.com/",
                  },
                ],
              });


            }

            run();
        - lang: Go
          label: Go (API Client)
          source: "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tapiclientgo \"github.com/gleanwork/api-client-go\"\n\t\"github.com/gleanwork/api-client-go/models/components\"\n\t\"github.com/gleanwork/api-client-go/types\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := apiclientgo.New(\n        apiclientgo.WithSecurity(os.Getenv(\"GLEAN_API_TOKEN\")),\n        apiclientgo.WithInstance(os.Getenv(\"GLEAN_INSTANCE\")),\n    )\n\n    res, err := s.Client.Activity.Report(ctx, components.Activity{\n        Events: []components.ActivityEvent{\n            components.ActivityEvent{\n                Action: components.ActivityEventActionHistoricalView,\n                Timestamp: types.MustTimeFromString(\"2000-01-23T04:56:07.000Z\"),\n                URL: \"https://example.com/\",\n            },\n            components.ActivityEvent{\n                Action: components.ActivityEventActionSearch,\n                Params: &components.ActivityEventParams{\n                    Query: apiclientgo.String(\"query\"),\n                },\n                Timestamp: types.MustTimeFromString(\"2000-01-23T04:56:07.000Z\"),\n                URL: \"https://example.com/search?q=query\",\n            },\n            components.ActivityEvent{\n                Action: components.ActivityEventActionView,\n                Params: &components.ActivityEventParams{\n                    Duration: apiclientgo.Int64(20),\n                    Referrer: apiclientgo.String(\"https://example.com/document\"),\n                },\n                Timestamp: types.MustTimeFromString(\"2000-01-23T04:56:07.000Z\"),\n                URL: \"https://example.com/\",\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
        - lang: Java
          label: Java (API Client)
          source: |-
            package hello.world;

            import java.lang.Exception;
            import java.time.OffsetDateTime;
            import java.util.List;
            import org.openapis.openapi.Glean;
            import org.openapis.openapi.models.components.*;
            import org.openapis.openapi.models.operations.ActivityResponse;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Glean sdk = Glean.builder()
                            .apiToken(System.getenv().getOrDefault("GLEAN_API_TOKEN", ""))
                        .build();

                    Activity req = Activity.builder()
                            .events(List.of(
                                ActivityEvent.builder()
                                    .action(ActivityEventAction.HISTORICAL_VIEW)
                                    .timestamp(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                    .url("https://example.com/")
                                    .build(),
                                ActivityEvent.builder()
                                    .action(ActivityEventAction.SEARCH)
                                    .timestamp(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                    .url("https://example.com/search?q=query")
                                    .params(ActivityEventParams.builder()
                                        .query("query")
                                        .build())
                                    .build(),
                                ActivityEvent.builder()
                                    .action(ActivityEventAction.VIEW)
                                    .timestamp(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                    .url("https://example.com/")
                                    .params(ActivityEventParams.builder()
                                        .duration(20L)
                                        .referrer("https://example.com/document")
                                        .build())
                                    .build()))
                            .build();

                    ActivityResponse res = sdk.client().activity().report()
                            .request(req)
                            .call();

                    // handle response
                }
            }
  /rest/api/v1/feedback:
    post:
      tags:
        - Activity
      summary: Report client activity
      description: Report events that happen to results within a Glean client UI, such as search result views and clicks.  This signal improves search quality.
      operationId: feedback
      x-visibility: Public
      x-codegen-request-body-name: payload
      parameters:
        - name: feedback
          in: query
          description: A URL encoded versions of Feedback. This is useful for requests.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
        x-exportParamName: Feedback
      responses:
        '200':
          description: OK
        '400':
          description: Invalid request
        '401':
          description: Not Authorized
        '429':
          description: Too Many Requests
      x-speakeasy-group: client.activity
      x-codeSamples:
        - lang: Python
          label: Python (API Client)
          source: |-
            from glean.api_client import Glean, models
            import os


            with Glean(
                api_token=os.getenv("GLEAN_API_TOKEN", ""),
                instance=os.getenv("GLEAN_INSTANCE", ""),
            ) as glean:

                glean.client.activity.feedback(feedback1={
                    "tracking_tokens": [
                        "trackingTokens",
                    ],
                    "event": models.Event.VIEW,
                })

                # Use the SDK ...
        - lang: JavaScript
          label: Typescript (API Client)
          source: |-
            import { Glean } from "@gleanwork/api-client";

            const glean = new Glean({
              apiToken: process.env["GLEAN_API_TOKEN"] ?? "",
              instance: process.env["GLEAN_INSTANCE"] ?? "",
            });

            async function run() {
              await glean.client.activity.feedback({
                trackingTokens: [
                  "trackingTokens",
                ],
                event: "VIEW",
              });


            }

            run();
        - lang: Go
          label: Go (API Client)
          source: "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tapiclientgo \"github.com/gleanwork/api-client-go\"\n\t\"github.com/gleanwork/api-client-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := apiclientgo.New(\n        apiclientgo.WithSecurity(os.Getenv(\"GLEAN_API_TOKEN\")),\n        apiclientgo.WithInstance(os.Getenv(\"GLEAN_INSTANCE\")),\n    )\n\n    res, err := s.Client.Activity.Feedback(ctx, nil, &components.Feedback{\n        TrackingTokens: []string{\n            \"trackingTokens\",\n        },\n        Event: components.EventView,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
        - lang: Java
          label: Java (API Client)
          source: |-
            package hello.world;

            import java.lang.Exception;
            import java.util.List;
            import org.openapis.openapi.Glean;
            import org.openapis.openapi.models.components.Event;
            import org.openapis.openapi.models.components.Feedback;
            import org.openapis.openapi.models.operations.FeedbackResponse;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Glean sdk = Glean.builder()
                            .apiToken(System.getenv().getOrDefault("GLEAN_API_TOKEN", ""))
                        .build();

                    FeedbackResponse res = sdk.client().activity().feedback()
                            .feedback1(Feedback.builder()
                                .trackingTokens(List.of(
                                    "trackingTokens"))
                                .event(Event.VIEW)
                                .build())
                            .call();

                    // handle response
                }
            }
components:
  schemas:
    SeenFeedbackInfo:
      properties:
        isExplicit:
          type: boolean
          description: The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.
    WorkflowFeedbackInfo:
      properties:
        source:
          type: string
          enum:
            - ZERO_STATE
            - LIBRARY
            - HOMEPAGE
          description: Where the feedback of the workflow originated from
    User:
      properties:
        userID:
          description: An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).
          type: string
        origID:
          description: An opaque user ID for the authenticated user (ignores actas).
          type: string
    UserViewInfo:
      properties:
        docId:
          type: string
          description: Unique Glean Document ID of the associated document.
        docTitle:
          type: string
          description: Title of associated document.
        docUrl:
          type: string
          description: URL of associated document.
    SessionInfo:
      properties:
        sessionTrackingToken:
          type: string
          description: A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.
        tabId:
          type: string
          description: A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.
        lastSeen:
          type: string
          format: date-time
          description: The last time the server saw this token.
        lastQuery:
          type: string
          description: The last query seen by the server.
    ActivityEventParams:
      properties:
        bodyContent:
          description: The HTML content of the page body.
          type: string
        datasourceInstance:
          type: string
          description: The full datasource instance name inferred from the URL of the event
        datasource:
          type: string
          description: The datasource without the instance inferred from the URL of the event
        instanceOnlyName:
          type: string
          description: The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event
        duration:
          description: Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.
          type: integer
        query:
          description: The user's search query associated with a SEARCH.
          type: string
        referrer:
          description: The referring URL of the VIEW or SEARCH.
          type: string
        title:
          description: The page title associated with the URL of the event
          type: string
        truncated:
          description: Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when a `VIEW` is finished.
          type: boolean
    FeedbackChatExchange:
      properties:
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp in millis for the chat request.
        agent:
          type: string
          description: Either DEFAULT (company knowledge) or GPT (world knowledge).
        userQuery:
          type: string
          description: Initial query entered by the user.
        searchQuery:
          type: string
          description: Search query performed by the agent.
        resultDocuments:
          type: array
          description: List of documents read by the agent.
          items:
            properties:
              title:
                type: string
              url:
                type: string
        response:
          type: string
    ActivityEvent:
      required:
        - action
        - source
        - timestamp
        - url
      properties:
        id:
          type: string
          description: Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
        action:
          type: string
          description: The type of activity this represents.
          x-enumDescriptions:
            VIEW: Represents a visit to the given `url`.
            EDIT: Represents an edit of the document represented by the `url`.
            SEARCH: Represents a search performed at the given `url`.
            COMMENT: Represents a comment on the document represented by the `url`.
            CRAWL: Represents an explicit request to index the given `url` along with associated attributes in this payload.
            HISTORICAL_SEARCH: Represents a search performed at the given `url` as indicated by the user's history.
            HISTORICAL_VIEW: Represents a visit to the given `url` as indicated by the user's history.
          enum:
            - VIEW
            - EDIT
            - SEARCH
            - COMMENT
            - CRAWL
            - HISTORICAL_SEARCH
            - HISTORICAL_VIEW
        params:
          $ref: '#/components/schemas/ActivityEventParams'
        timestamp:
          type: string
          description: The ISO 8601 timestamp when the activity began.
          format: date-time
        url:
          description: The URL of the activity.
          type: string
    Activity:
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/ActivityEvent'
      example:
        events:
          - url: https://example.com/
            action: HISTORICAL_VIEW
            timestamp: '2000-01-23T04:56:07.000Z'
          - url: https://example.com/search?q=query
            action: SEARCH
            timestamp: '2000-01-23T04:56:07.000Z'
            params:
              query: query
          - url: https://example.com/
            action: VIEW
            timestamp: '2000-01-23T04:56:07.000Z'
            params:
              duration: 20
              referrer: https://example.com/document
    ManualFeedbackInfo:
      properties:
        email:
          type: string
          description: The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.
        source:
          type: string
          description: The source associated with the Feedback.event.MANUAL_FEEDBACK event.
          enum:
            - AUTOCOMPLETE
            - CALENDAR
            - CHAT
            - CHAT_GENERAL
            - CONCEPT_CARD
            - DESKTOP_APP
            - DISAMBIGUATION_CARD
            - EXPERT_DETECTION
            - FEED
            - GENERATED_Q_AND_A
            - INLINE_MENU
            - NATIVE_RESULT
            - Q_AND_A
            - RELATED_QUESTIONS
            - REPORT_ISSUE
            - SCIOBOT
            - SEARCH
            - SIDEBAR
            - SUMMARY
        issue:
          type: string
          description: The issue the user indicated in the feedback.
          deprecated: true
        issues:
          type: array
          description: The issue(s) the user indicated in the feedback.
          items:
            type: string
            enum:
              - INACCURATE_RESPONSE
              - INCOMPLETE_OR_NO_ANSWER
              - INCORRECT_CITATION
              - MISSING_CITATION
              - OTHER
              - OUTDATED_RESPONSE
              - RESULT_MISSING
              - RESULT_SHOULD_NOT_APPEAR
              - RESULTS_HELPFUL
              - RESULTS_POOR_ORDER
              - TOO_MUCH_ONE_KIND
        imageUrls:
          type: array
          items:
            type: string
          description: URLs of images uploaded by user when providing feedback
        query:
          type: string
          description: The query associated with the Feedback.event.MANUAL_FEEDBACK event.
        obscuredQuery:
          type: string
          description: The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.
        activeTab:
          type: string
          description: Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.
        comments:
          type: string
          description: The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.
        searchResults:
          type: array
          items:
            type: string
          description: The array of search result Glean Document IDs, ordered by top to bottom result.
        previousMessages:
          type: array
          items:
            type: string
          description: The array of previous messages in a chat session, ordered by oldest to newest.
        chatTranscript:
          type: array
          items:
            $ref: '#/components/schemas/FeedbackChatExchange'
          description: Array of previous request/response exchanges, ordered by oldest to newest.
        numQueriesFromFirstRun:
          type: integer
          description: How many times this query has been run in the past.
        vote:
          type: string
          description: The vote associated with the Feedback.event.MANUAL_FEEDBACK event.
          enum:
            - UPVOTE
            - DOWNVOTE
        rating:
          type: integer
          description: A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.
        ratingKey:
          type: string
          description: A description of the rating that contextualizes how it appeared to the user, e.g. "satisfied".
        ratingScale:
          type: integer
          description: The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.
    Feedback:
      required:
        - event
        - trackingTokens
      properties:
        id:
          type: string
          description: Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
        category:
          type: string
          description: The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.
          enum:
            - ANNOUNCEMENT
            - AUTOCOMPLETE
            - COLLECTIONS
            - FEED
            - SEARCH
            - CHAT
            - NTP
            - WORKFLOWS
            - SUMMARY
            - GENERAL
            - PROMPTS
        trackingTokens:
          type: array
          description: A list of server-generated trackingTokens to which this event applies.
          items:
            type: string
        event:
          type: string
          description: The action the user took within a Glean client with respect to the object referred to by the given `trackingToken`.
          x-enumDescriptions:
            CLICK: The object's primary link was clicked with the intent to view its full representation. Depending on the object type, this may imply an external navigation or navigating to a new page or view within the Glean app.
            CONTAINER_CLICK: A link to the object's parent container (e.g. the folder in which it's located) was clicked.
            COPY_LINK: The user copied a link to the primary link.
            CREATE: The user creates a document.
            DISMISS: The user dismissed the object such that it was hidden from view.
            DOWNVOTE: The user gave feedback that the object was not useful.
            EMAIL: The user attempted to send an email.
            EXECUTE: The user executed the object (e.g. ran a workflow).
            FILTER: The user applied a filter.
            FIRST_TOKEN: The first token of a streaming response is received.
            FOCUS_IN: The user clicked into an interactive element, e.g. the search box.
            LAST_TOKEN: The final token of a streaming response is received.
            MANUAL_FEEDBACK: The user submitted textual manual feedback regarding the object.
            MARK_AS_READ: The user explicitly marked the content as read.
            MESSAGE: The user attempted to send a message using their default messaing app.
            MIDDLE_CLICK: The user middle clicked the object's primary link with the intent to open its full representation in a new tab.
            PAGE_BLUR: The user puts a page out of focus but keeps it in the background.
            PAGE_FOCUS: The user puts a page in focus, meaning it is the first to receive keyboard events.
            PAGE_LEAVE: The user leaves a page and it is unloaded (by clicking a link, closing the tab/window, etc).
            PREVIEW: The user clicked the object's inline preview affordance.
            RIGHT_CLICK: The user right clicked the object's primary link. This may indicate an intent to open it in a new tab or copy it.
            SECTION_CLICK: The user clicked a link to a subsection of the primary object.
            SEEN: The user has likely seen the object (e.g. took action to make the object visible within the user's viewport).
            SHARE: The user shared the object with another user.
            SHOW_MORE: The user clicked the object's show more affordance.
            UPVOTE: The user gave feedback that the object was useful.
            VIEW: The object was visible within the user's viewport.
            VISIBLE: The object was visible within the user's viewport.
          enum:
            - CLICK
            - CONTAINER_CLICK
            - COPY_LINK
            - CREATE
            - DISMISS
            - DOWNVOTE
            - EMAIL
            - EXECUTE
            - FILTER
            - FIRST_TOKEN
            - FOCUS_IN
            - LAST_TOKEN
            - MANUAL_FEEDBACK
            - MARK_AS_READ
            - MESSAGE
            - MIDDLE_CLICK
            - PAGE_BLUR
            - PAGE_FOCUS
            - PAGE_LEAVE
            - PREVIEW
            - RELATED_CLICK
            - RIGHT_CLICK
            - SECTION_CLICK
            - SEEN
            - SHARE
            - SHOW_MORE
            - UPVOTE
            - VIEW
            - VISIBLE
        position:
          type: integer
          description: Position of the element in the case that the client controls order (such as feed and autocomplete).
        payload:
          type: string
          description: For type MANUAL_FEEDBACK, contains string of user feedback. For autocomplete, partial query string. For feed, string of user feedback in addition to manual feedback signals extracted from all suggested content.
        sessionInfo:
          $ref: '#/components/schemas/SessionInfo'
        timestamp:
          type: string
          description: The ISO 8601 timestamp when the event occured.
          format: date-time
        user:
          $ref: '#/components/schemas/User'
        pathname:
          type: string
          description: The path the client was at when the feedback event triggered.
        channels:
          type: array
          description: Where the feedback will be sent, e.g. to Glean, the user's company, or both. If no channels are specified, feedback will go only to Glean.
          items:
            type: string
            enum:
              - COMPANY
              - GLEAN
        url:
          type: string
          description: The URL the client was at when the feedback event triggered.
        uiTree:
          description: The UI element tree associated with the event, if any.
          items:
            type: string
          type: array
        uiElement:
          type: string
          description: The UI element associated with the event, if any.
        manualFeedbackInfo:
          $ref: '#/components/schemas/ManualFeedbackInfo'
        seenFeedbackInfo:
          $ref: '#/components/schemas/SeenFeedbackInfo'
        userViewInfo:
          $ref: '#/components/schemas/UserViewInfo'
        workflowFeedbackInfo:
          $ref: '#/components/schemas/WorkflowFeedbackInfo'
        applicationId:
          type: string
          description: The application ID of the client that sent the feedback event.
        agentId:
          type: string
          description: The agent ID of the client that sent the feedback event.
      example:
        trackingTokens:
          - trackingTokens
        event: VIEW
  securitySchemes:
    APIToken:
      scheme: bearer
      type: http
