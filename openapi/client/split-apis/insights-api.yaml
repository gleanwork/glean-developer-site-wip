openapi: 3.0.0
info:
  version: 0.9.0
  title: Glean API - Insights
  description: API endpoints for Insights
  x-logo:
    url: https://app.glean.com/images/glean-text2.svg
  x-speakeasy-name: Glean API
servers:
  - url: https://{instance}-be.glean.com
    variables:
      instance:
        default: instance-name
        description: The instance name (typically the email domain without the TLD) that determines the deployment backend.
security:
  - APIToken: []
paths:
  /rest/api/v1/insights:
    post:
      tags:
        - Insights
      summary: Read insights
      description: Reads the aggregate information for each user, query, and content.
      operationId: insights
      x-visibility: Public
      x-codegen-request-body-name: payload
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsightsRequest'
        description: Includes request params for insights dashboard data.
        required: true
        x-exportParamName: InsightsRequest
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsightsResponse'
        '400':
          description: Invalid request
        '401':
          description: Not Authorized
        '429':
          description: Too Many Requests
      x-speakeasy-name-override: retrieve
      x-speakeasy-group: client.insights
      x-codeSamples:
        - lang: Python
          label: Python (API Client)
          source: |-
            from glean.api_client import Glean, models
            import os


            with Glean(
                api_token=os.getenv("GLEAN_API_TOKEN", ""),
                instance=os.getenv("GLEAN_INSTANCE", ""),
            ) as glean:

                res = glean.client.insights.retrieve(categories=[
                    models.InsightsRequestCategory.COLLECTIONS,
                ])

                # Handle response
                print(res)
        - lang: JavaScript
          label: Typescript (API Client)
          source: |-
            import { Glean } from "@gleanwork/api-client";

            const glean = new Glean({
              apiToken: process.env["GLEAN_API_TOKEN"] ?? "",
              instance: process.env["GLEAN_INSTANCE"] ?? "",
            });

            async function run() {
              const result = await glean.client.insights.retrieve({
                categories: [
                  "COLLECTIONS",
                  "SHORTCUTS",
                  "ANNOUNCEMENTS",
                ],
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: Go
          label: Go (API Client)
          source: "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tapiclientgo \"github.com/gleanwork/api-client-go\"\n\t\"github.com/gleanwork/api-client-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := apiclientgo.New(\n        apiclientgo.WithSecurity(os.Getenv(\"GLEAN_API_TOKEN\")),\n        apiclientgo.WithInstance(os.Getenv(\"GLEAN_INSTANCE\")),\n    )\n\n    res, err := s.Client.Insights.Retrieve(ctx, components.InsightsRequest{\n        Categories: []components.InsightsRequestCategory{\n            components.InsightsRequestCategoryCollections,\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.InsightsResponse != nil {\n        // handle response\n    }\n}"
        - lang: Java
          label: Java (API Client)
          source: |-
            package hello.world;

            import java.lang.Exception;
            import java.util.List;
            import org.openapis.openapi.Glean;
            import org.openapis.openapi.models.components.InsightsRequest;
            import org.openapis.openapi.models.components.InsightsRequestCategory;
            import org.openapis.openapi.models.operations.InsightsResponse;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Glean sdk = Glean.builder()
                            .apiToken(System.getenv().getOrDefault("GLEAN_API_TOKEN", ""))
                        .build();

                    InsightsRequest req = InsightsRequest.builder()
                            .categories(List.of(
                                InsightsRequestCategory.COLLECTIONS))
                            .build();

                    InsightsResponse res = sdk.client().insights().retrieve()
                            .request(req)
                            .call();

                    if (res.insightsResponse().isPresent()) {
                        // handle response
                    }
                }
            }
components:
  schemas:
    ClusterTypeEnum:
      type: string
      description: The reason for inclusion of clusteredResults.
      enum:
        - SIMILAR
        - FRESHNESS
        - TITLE
        - CONTENT
        - NONE
        - THREAD_REPLY
        - THREAD_ROOT
        - PREFIX
        - SUFFIX
    CollectionPinnableCategories:
      type: string
      description: Categories a Collection can be pinned to.
      enum:
        - COMPANY_RESOURCE
        - DEPARTMENT_RESOURCE
        - TEAM_RESOURCE
    CollectionPinnableTargets:
      type: string
      description: What targets can a Collection be pinned to.
      enum:
        - RESOURCE_CARD
        - TEAM_PROFILE_PAGE
    CommunicationChannel:
      type: string
      enum:
        - COMMUNICATION_CHANNEL_EMAIL
        - COMMUNICATION_CHANNEL_SLACK
    ConnectorType:
      type: string
      description: The source from which document content was pulled, e.g. an API crawl or browser history
      enum:
        - API_CRAWL
        - BROWSER_CRAWL
        - BROWSER_HISTORY
        - BUILTIN
        - FEDERATED_SEARCH
        - PUSH_API
        - WEB_CRAWL
        - NATIVE_HISTORY
    EntityType:
      type: string
      description: The type of entity.
      x-include-enum-class-prefix: true
      enum:
        - PERSON
        - PROJECT
        - CUSTOMER
    GroupType:
      type: string
      description: The type of user group
      enum:
        - DEPARTMENT
        - ALL
        - TEAM
        - JOB_TITLE
        - ROLE_TYPE
        - LOCATION
        - REGION
        - EXTERNAL_GROUP
    ScopeType:
      type: string
      description: Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
      enum:
        - GLOBAL
        - OWN
    UserRole:
      type: string
      description: A user's role with respect to a specific document.
      enum:
        - OWNER
        - VIEWER
        - ANSWER_MODERATOR
        - EDITOR
        - VERIFIER
    DocumentVisibility:
      type: string
      description: The level of visibility of the document as understood by our system.
      x-enumDescriptions:
        PRIVATE: Only one person is able to see the document.
        SPECIFIC_PEOPLE_AND_GROUPS: Only specific people and/or groups can see the document.
        DOMAIN_LINK: Anyone in the domain with the link can see the document.
        DOMAIN_VISIBLE: Anyone in the domain can search for the document.
        PUBLIC_LINK: Anyone with the link can see the document.
        PUBLIC_VISIBLE: Anyone on the internet can search for the document.
      enum:
        - PRIVATE
        - SPECIFIC_PEOPLE_AND_GROUPS
        - DOMAIN_LINK
        - DOMAIN_VISIBLE
        - PUBLIC_LINK
        - PUBLIC_VISIBLE
    SearchResultProminenceEnum:
      type: string
      description: |
        The level of visual distinction that should be given to a result.
      x-enumDescriptions:
        HERO: A high-confidence result that should feature prominently on the page.
        PROMOTED: May not be the best result but should be given additional visual distinction.
        STANDARD: Should not be distinct from any other results.
      enum:
        - HERO
        - PROMOTED
        - STANDARD
    AnswerDocId:
      properties:
        docId:
          type: string
          description: Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
          example: ANSWERS_answer_3
    AnswerId:
      properties:
        id:
          type: integer
          description: The opaque ID of the Answer.
          example: 3
    UserGeneratedContentId:
      properties:
        id:
          type: integer
          description: The opaque id of the user generated content.
    CalendarAttendees: &ref_0
      type: object
      description: CalendarAttendees object
    Collection: &ref_32
      type: object
      description: Collection object
    ShortcutMutableProperties:
      type: object
      description: ShortcutMutableProperties object
    CustomFieldValueStr:
      properties:
        strText:
          type: string
          description: Text field for string value.
    SearchRequestInputDetails:
      properties:
        hasCopyPaste:
          type: boolean
          description: Whether the associated query was at least partially copy-pasted.  If subsequent requests are issued after a copy-pasted query is constructed (e.g. with facet modifications), this bit should continue to be set for those requests.
      example:
        hasCopyPaste: true
    StructuredTextMutableProperties:
      required:
        - text
      properties:
        text:
          type: string
          example: From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.
    CustomFieldValueHyperlink:
      properties:
        urlAnchor:
          type: string
          description: Anchor text for hyperlink.
        urlLink:
          type: string
          description: Link for this URL.
    FacetBucketFilter:
      properties:
        facet:
          type: string
          description: The facet whose buckets should be filtered.
        prefix:
          type: string
          description: The per-term prefix that facet buckets should be filtered on.
    IndexStatus:
      properties:
        lastCrawledTime:
          description: When the document was last crawled
          type: string
          format: date-time
        lastIndexedTime:
          description: When the document was last indexed
          type: string
          format: date-time
    Thumbnail:
      properties:
        photoId:
          type: string
          description: Photo id if the thumbnail is from splash.
        url:
          type: string
          description: Thumbnail URL. This can be user provided image and/or from downloaded images hosted by Glean.
    TimeInterval:
      required:
        - start
        - end
      properties:
        start:
          type: string
          description: The RFC3339 timestamp formatted start time of this event.
        end:
          type: string
          description: The RFC3339 timestamp formatted end time of this event.
    TimePoint:
      properties:
        epochSeconds:
          type: integer
          description: Epoch seconds. Has precedence over daysFromNow.
        daysFromNow:
          type: integer
          description: The number of days from now. Specification relative to current time. Can be negative.
    ViewerInfo:
      properties:
        role:
          type: string
          enum:
            - ANSWER_MODERATOR
            - OWNER
            - VIEWER
          description: DEPRECATED - use permissions instead. Viewer's role on the specific document.
          deprecated: true
        lastViewedTime:
          type: string
          format: date-time
    CollectionItemMutableProperties:
      properties:
        name:
          type: string
          description: The optional name of the Collection item.
        description:
          type: string
          description: A helpful description of why this CollectionItem is in the Collection that it's in.
        icon:
          type: string
          description: The emoji icon for this CollectionItem. Only used for Text type items.
    ExtractedQnA: &ref_41
      properties:
        heading:
          description: Heading text that was matched to produce this result.
          type: string
        question:
          description: Question text that was matched to produce this result.
          type: string
        questionResult: &ref_1
          type: object
          description: SearchResult object
      type: object
    FacetFilterValue:
      properties:
        value:
          type: string
          example: Spreadsheet
        relationType:
          type: string
          enum:
            - EQUALS
            - ID_EQUALS
            - LT
            - GT
            - NOT_EQUALS
          example: EQUALS
        isNegated:
          type: boolean
          deprecated: true
          description: DEPRECATED - please use relationType instead
    PersonDistance:
      required:
        - name
        - obfuscatedId
        - distance
      properties:
        name:
          type: string
          description: The display name.
        obfuscatedId:
          type: string
          description: An opaque identifier that can be used to request metadata for a Person.
        distance:
          type: number
          format: float
          description: Distance to person, refer to PeopleDistance pipeline on interpretation of the value.
    SearchProviderInfo:
      properties:
        name:
          type: string
          description: Name of the search provider.
        logoUrl:
          type: string
          description: URL to the provider's logo.
        searchLinkUrlTemplate:
          type: string
          description: URL template that can be used to perform the suggested search by replacing the {query} placeholder with the query suggestion.
      example:
        name: Google
        logo: https://app.glean.com/images/feather/globe.svg
        searchLinkUrlTemplate: https://www.google.com/search?q={query}&hl=en
    SocialNetwork:
      required:
        - name
        - profileUrl
      properties:
        name:
          type: string
          description: Possible values are "twitter", "linkedin".
        profileName:
          type: string
          description: Human-readable profile name.
        profileUrl:
          type: string
          format: url
          description: Link to profile.
    TeamEmail:
      properties:
        email:
          type: string
          format: email
          description: An email address
        type:
          type: string
          enum:
            - PRIMARY
            - SECONDARY
            - ONCALL
            - OTHER
          default: OTHER
        isUserGenerated:
          type: boolean
          description: true iff the email was manually added by a user from within Glean (aka not from the original data source)
    DatasourceProfile:
      required:
        - datasource
        - handle
      properties:
        datasource:
          type: string
          example: github
          description: The datasource the profile is of.
        handle:
          type: string
          description: The display name of the entity in the given datasource.
        url:
          type: string
          description: URL to view the entity's profile.
        nativeAppUrl:
          type: string
          description: A deep link, if available, into the datasource's native application for the entity's platform (i.e. slack://...).
        isUserGenerated:
          type: boolean
          description: For internal use only. True iff the data source profile was manually added by a user from within Glean (aka not from the original data source)
    PersonTeam:
      description: Use `id` if you index teams via Glean, and use `name` and `externalLink` if you want to use your own team pages
      properties:
        id:
          type: string
          description: Unique identifier
        name:
          type: string
          description: Team name
        externalLink:
          type: string
          format: uri
          description: Link to a team page on the internet or your company's intranet
        relationship:
          type: string
          description: The team member's relationship to the team. This defaults to MEMBER if not set.
          default: MEMBER
          enum:
            - MEMBER
            - MANAGER
            - LEAD
            - POINT_OF_CONTACT
            - OTHER
        joinDate:
          type: string
          format: date-time
          description: The team member's start date
    AiAppActionCounts:
      type: object
      additionalProperties:
        type: integer
      description: Map from action to frequency.
      properties:
        totalSlackbotResponses:
          type: integer
          description: Total number of Slackbot responses, both proactive and reactive.
        totalSlackbotResponsesShared:
          type: integer
          description: Total number of Slackbot responses shared publicly (upvoted).
        totalSlackbotResponsesNotHelpful:
          type: integer
          description: Total number of Slackbot responses rejected as not helpful (downvoted).
        totalChatMessages:
          type: integer
          description: Total number of Chat messages sent in requested period.
        totalUpvotes:
          type: integer
          description: Total number of Chat messages which received upvotes by the user.
        totalDownvotes:
          type: integer
          description: Total number of Chat messages which received downvotes by the user.
    AuthToken:
      required:
        - accessToken
        - datasource
      properties:
        accessToken:
          type: string
        datasource:
          type: string
        scope:
          type: string
        tokenType:
          type: string
        authUser:
          description: Used by Google to indicate the index of the logged in user. Useful for generating hyperlinks that support multilogin.
          type: string
        expiration:
          description: Unix timestamp when this token expires (in seconds since epoch UTC).
          type: integer
          format: int64
      example:
        accessToken: 123abc
        datasource: gmail
        scope: email profile https://www.googleapis.com/auth/gmail.readonly
        tokenType: Bearer
        authUser: '1'
    Meeting: &ref_42
      properties:
        attendees: *ref_0
        description:
          type: string
        endTime:
          format: date-time
          type: string
        id:
          type: string
        startTime:
          format: date-time
          type: string
        title:
          type: string
        url:
          type: string
      type: object
    RelatedObject:
      required:
        - id
      properties:
        id:
          type: string
          description: The ID of the related object
        metadata:
          type: object
          description: Some metadata of the object which can be displayed, while not having the actual object.
          properties:
            name:
              type: string
              description: Placeholder name of the object, not the relationship.
    IconConfig:
      description: Defines how to render an icon
      properties:
        generatedBackgroundColorKey:
          type: string
        backgroundColor:
          type: string
        color:
          type: string
        key:
          type: string
        iconType:
          enum:
            - COLLECTION
            - CUSTOM
            - DATASOURCE
            - DATASOURCE_INSTANCE
            - FAVICON
            - FILE_TYPE
            - GENERATED_BACKGROUND
            - GLYPH
            - MIME_TYPE
            - NO_ICON
            - PERSON
            - REACTIONS
            - URL
        masked:
          type: boolean
          description: Whether the icon should be masked based on current theme.
        name:
          type: string
          description: The name of the icon if applicable, e.g. the glyph name for `IconType.GLYPH` icons.
        url:
          type: string
          description: The URL to an image to be displayed if applicable, e.g. the URL for `iconType.URL` icons.
      example:
        color: '#343CED'
        key: person_icon
        iconType: GLYPH
        name: user
    InsightsAgentsRequestOptions:
      type: object
      properties:
        agentIds:
          type: array
          items:
            type: string
          description: IDs of the Agents for which Insights should be returned. An empty array signifies all.
    InsightsAiAppRequestOptions:
      type: object
      properties:
        aiAppIds:
          type: array
          items:
            type: string
          description: IDs of the AI Apps for which Insights should be returned. An empty array signifies all.
    StructuredLocation:
      type: object
      description: Detailed location with information about country, state, city etc.
      properties:
        deskLocation:
          type: string
          description: Desk number.
        timezone:
          type: string
          description: Location's timezone, e.g. UTC, PST.
        address:
          type: string
          description: Office address or name.
        city:
          type: string
          description: Name of the city.
        state:
          type: string
          description: State code.
        region:
          type: string
          description: Region information, e.g. NORAM, APAC.
        zipCode:
          type: string
          description: ZIP Code for the address.
        country:
          type: string
          description: Country name.
        countryCode:
          type: string
          description: Alpha-2 or Alpha-3 ISO 3166 country code, e.g. US or USA.
    DocumentCounts:
      type: object
      description: A map of {string, int} pairs representing counts of each document type associated with this customer.
      additionalProperties:
        type: integer
    DocumentMetadata: &ref_4
      type: object
      description: DocumentMetadata object
    SearchResult: *ref_1
    ShortcutMetadata:
      type: object
      description: ShortcutMetadata object
    CustomDataValue:
      properties:
        displayLabel:
          type: string
        stringValue:
          type: string
        stringListValue:
          type: array
          description: list of strings for multi-value properties
          items:
            type: string
        numberValue:
          type: number
        booleanValue:
          type: boolean
    DocumentSection:
      type: object
      properties:
        title:
          type: string
          description: The title of the document section (e.g. the section header).
        url:
          type: string
          description: The permalink of the document section.
    AppResult:
      required:
        - datasource
      properties:
        datasource:
          type: string
          description: The app or other repository type this represents
        docType:
          type: string
          description: The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request).
        mimeType:
          type: string
          description: Mimetype is used to differentiate between sub applications from a datasource (e.g. Sheets, Docs from Gdrive)
        iconUrl:
          type: string
          description: If there is available icon URL.
    Company:
      required:
        - name
      properties:
        name:
          type: string
          description: User-friendly display name.
        profileUrl:
          type: string
          description: Link to internal company company profile.
        websiteUrls:
          type: array
          description: Link to company's associated websites.
          items:
            type: string
        logoUrl:
          type: string
          description: The URL of the company's logo. Public, Glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
        location:
          type: string
          description: User facing string representing the company's location.
          example: New York City
        phone:
          type: string
          description: Phone number as a number string.
        fax:
          type: string
          description: Fax number as a number string.
        industry:
          type: string
          description: User facing string representing the company's industry.
          example: Finances
        annualRevenue:
          type: number
          format: double
          description: Average company's annual revenue for reference.
        numberOfEmployees:
          type: integer
          format: int64
          description: Average company's number of employees for reference.
        stockSymbol:
          type: string
          description: Company's stock symbol if company is public.
        foundedDate:
          type: string
          format: date
          description: The date when the company was founded.
        about:
          type: string
          description: User facing description of company.
          example: Financial, software, data, and media company headquartered in Midtown Manhattan, New York City
    DocumentContent:
      properties:
        fullTextList:
          type: array
          items:
            type: string
          description: The plaintext content of the document.
    DocumentSpec:
      oneOf:
        - type: object
          properties:
            url:
              type: string
              description: The URL of the document.
        - type: object
          properties:
            id:
              type: string
              description: The ID of the document.
        - type: object
          properties:
            ugcType:
              type: string
              enum:
                - ANNOUNCEMENTS
                - ANSWERS
                - COLLECTIONS
                - SHORTCUTS
              description: The type of the user generated content (UGC datasource).
            contentId:
              type: integer
              description: The id for user generated content.
            docType:
              type: string
              description: The specific type of the user generated content type.
    QuerySuggestionList: &ref_14
      properties:
        person: &ref_3
          type: object
          description: Person object
        suggestions:
          type: array
          items:
            type: object
            properties:
              QuerySuggestion:
                type: object
                description: QuerySuggestion object
      type: object
    CodeLine:
      properties:
        content:
          type: string
        lineNumber:
          type: integer
        ranges:
          description: Index ranges depicting matched sections of the line
          type: array
          items: &ref_2
            type: object
            properties:
              TextRange:
                type: object
                description: TextRange object
      type: object
    CustomFieldData:
      required: &ref_10
        - label
        - values
        - displayable
      properties:
        displayable:
          default: true
          description: Determines whether the client should display this custom field
          type: boolean
        label:
          description: A user-facing label for this field.
          type: string
        values:
          type: array
          items: &ref_11
            type: object
            properties:
              CustomFieldValue:
                type: object
                description: CustomFieldValue object
      type: object
    RelatedQuestion: &ref_44
      properties:
        answer:
          description: The answer for the related question
          type: string
        question:
          description: The text of the related question
          type: string
        ranges:
          description: Subsections of the answer string to which some special formatting should be applied (eg. bold)
          type: array
          items: *ref_2
      type: object
    Reaction:
      properties:
        count:
          description: The count of the reaction type on the document.
          type: integer
        reactedByViewer:
          description: Whether the user in context reacted with this type to the document.
          type: boolean
        reactors:
          type: array
          items: &ref_7
            type: object
            properties:
              Person:
                type: object
                description: Person object
        type:
          type: string
      type: object
    Code: &ref_38
      example:
        repoName: scio
        fileName: README.md
        matches:
          - lineNumber: 1
            content: Welcome to the beginning
            ranges: []
          - lineNumber: 2
            content: Second line of the file
            ranges: []
          - lineNumber: 3
            content: hello world hello world
            ranges:
              - startindex: 0
                endIndex: 5
              - startIndex: 12
                endIndex: 17
      properties:
        fileName:
          type: string
        fileUrl:
          type: string
        isLastMatch:
          description: Last file match for a repo
          type: boolean
        lines:
          type: array
          items:
            type: object
            properties:
              CodeLine:
                type: object
                description: CodeLine object
        repoName:
          type: string
      type: object
    InviteInfo: &ref_13
      description: Information regarding the invite status of a person.
      properties:
        inviteTime:
          deprecated: true
          description: The time this person was invited in ISO format (ISO 8601).
          format: date-time
          type: string
        inviter: *ref_3
        invites:
          description: Latest invites received by the user for each channel
          type: array
          items:
            type: object
            properties:
              ChannelInviteInfo:
                type: object
                description: ChannelInviteInfo object
        reminderTime:
          deprecated: true
          description: The time this person was reminded in ISO format (ISO 8601) if a reminder was sent.
          format: date-time
          type: string
        signUpTime:
          description: The time this person signed up in ISO format (ISO 8601).
          format: date-time
          type: string
      type: object
    CustomData:
      type: object
      description: Custom fields specific to individual datasources
      additionalProperties:
        $ref: '#/components/schemas/CustomDataValue'
    GrantPermission:
      description: Describes the grant permission level that a user has for a specific feature
      properties:
        scopeType:
          $ref: '#/components/schemas/ScopeType'
    ObjectPermissions:
      properties:
        write:
          $ref: '#/components/schemas/WritePermission'
    PermissionedObject:
      properties:
        permissions:
          $ref: '#/components/schemas/ObjectPermissions'
          description: The permissions the current viewer has with respect to a particular object.
    ReadPermission:
      description: Describes the read permission level that a user has for a specific feature
      properties:
        scopeType:
          $ref: '#/components/schemas/ScopeType'
    RelatedObjects:
      properties:
        relatedObjects:
          type: object
          description: A list of objects related to a source object.
          additionalProperties:
            $ref: '#/components/schemas/RelatedObjectEdge'
    AnonymousEvent:
      description: A generic, light-weight calendar event.
      type: object
      properties:
        time:
          $ref: '#/components/schemas/TimeInterval'
        eventType:
          description: The nature of the event, for example "out of office".
          type: string
          enum:
            - DEFAULT
            - OUT_OF_OFFICE
    CountInfo:
      required:
        - count
      properties:
        count:
          type: integer
          description: The counter value
        period:
          $ref: '#/components/schemas/Period'
        org:
          type: string
          description: The unit of organization over which we did the count aggregation, e.g. org (department) or company
    Disambiguation:
      type: object
      description: A disambiguation between multiple entities with the same name
      properties:
        name:
          type: string
          description: Name of the ambiguous entity
        id:
          type: string
          description: The unique id of the entity in the knowledge graph
        type:
          $ref: '#/components/schemas/EntityType'
    Group:
      required:
        - type
        - id
      properties:
        type:
          $ref: '#/components/schemas/GroupType'
        id:
          type: string
          description: A unique identifier for the group. May be the same as name.
        name:
          type: string
          description: Name of the group.
    SearchResultSnippet:
      example: &ref_45
        snippet: snippet
        mimeType: mimeType
      required: &ref_46
        - snippet
      properties:
        mimeType:
          description: The mime type of the snippets, currently either text/plain or text/html.
          type: string
        ranges:
          description: The bolded ranges within text.
          type: array
          items: *ref_2
        snippet:
          description: A matching snippet from the document. Query term matches are marked by the unicode characters uE006 and uE007.
          type: string
        snippetTextOrdering:
          description: Used for sorting based off the snippet's location within all_snippetable_text
          type: integer
        text:
          description: A matching snippet from the document with no highlights.
          type: string
        url:
          description: A URL, generated based on availability, that links to the position of the snippet text or to the nearest header above the snippet text.
          type: string
      type: object
    Badge:
      type: object
      description: Displays a user's accomplishment or milestone
      properties:
        key:
          type: string
          description: An auto generated unique identifier.
        displayName:
          type: string
          description: The badge name displayed to users
        iconConfig:
          $ref: '#/components/schemas/IconConfig'
        pinned:
          type: boolean
          description: The badge should be shown on the PersonAttribution
      example:
        key: deployment_name_new_hire
        displayName: New hire
        iconConfig:
          color: '#343CED'
          key: person_icon
          iconType: GLYPH
          name: user
    InsightsRequest:
      allOf:
        - $ref: '#/components/schemas/DownloadInsightsRequest'
        - type: object
          properties:
            assistantActivityTypes:
              type: array
              items:
                type: string
                enum:
                  - GLEAN_CHAT
                  - AI_SUMMARY
                  - AI_ANSWER
                  - GLEANBOT_RESPONSE
              description: Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category.
            disablePerUserInsights:
              type: boolean
              description: If true, suppresses the generation of per-user Insights in the response. Default is false.
    Period:
      properties:
        minDaysFromNow:
          type: integer
          description: DEPRECATED - The number of days from now in the past to define upper boundary of time period.
          deprecated: true
        maxDaysFromNow:
          type: integer
          description: DEPRECATED - The number of days from now in the past to define lower boundary of time period.
          deprecated: true
        start:
          $ref: '#/components/schemas/TimePoint'
        end:
          $ref: '#/components/schemas/TimePoint'
    WritePermission:
      description: Describes the write permissions levels that a user has for a specific feature
      properties:
        scopeType:
          $ref: '#/components/schemas/ScopeType'
        create:
          type: boolean
          description: True if user has create permission for this feature and scope
        update:
          type: boolean
          description: True if user has update permission for this feature and scope
        delete:
          type: boolean
          description: True if user has delete permission for this feature and scope
    GrantPermissions:
      description: Describes the grant permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
      additionalProperties:
        type: array
        description: List of grant permissions (for different scopes but same feature)
        items:
          $ref: '#/components/schemas/GrantPermission'
    ReadPermissions:
      description: Describes the read permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
      additionalProperties:
        type: array
        description: List of read permissions (for different scopes but same feature)
        items:
          $ref: '#/components/schemas/ReadPermission'
    WritePermissions:
      description: Describes the write permissions levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
      additionalProperties:
        type: array
        description: List of write permissions (for different scopes but same feature)
        items:
          $ref: '#/components/schemas/WritePermission'
    CustomEntityMetadata:
      properties:
        customData:
          $ref: '#/components/schemas/CustomData'
    CollectionPinMetadata:
      required:
        - id
        - target
      properties:
        id:
          type: integer
          description: The ID of the Collection.
        target:
          $ref: '#/components/schemas/CollectionPinTarget'
    CustomerMetadata:
      properties:
        datasourceId:
          type: string
          description: The user visible id of the salesforce customer account.
        customData:
          $ref: '#/components/schemas/CustomData'
    FacetFilterSet:
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FacetFilter'
      description: Within a single FacetFilterSet, the filters are treated as AND. For example, owner Sumeet and type Spreadsheet shows documents that are by Sumeet AND are Spreadsheets.
    RelatedObjectEdge:
      properties:
        objects:
          type: array
          items:
            $ref: '#/components/schemas/RelatedObject'
    RestrictionFilters:
      properties:
        containerSpecs:
          description: 'Specifications for containers that should be used as part of the restriction (include/exclude). Memberships are recursively defined for a subset of datasources (currently: SharePoint, OneDrive, Google Drive, and Confluence). Please contact the Glean team to enable this for more datasources. Recursive memberships do not apply for Collections.'
          type: array
          items:
            $ref: '#/components/schemas/DocumentSpec'
    LabeledCountInfo:
      required:
        - label
      properties:
        label:
          type: string
          description: Label for the included count information.
        countInfo:
          type: array
          items:
            $ref: '#/components/schemas/CountInfo'
          description: List of data points for counts for a given date period.
    CollectionPinTarget:
      required:
        - category
      properties:
        category:
          $ref: '#/components/schemas/CollectionPinnableCategories'
        value:
          type: string
          description: Optional. If category supports values, then the additional value for the category e.g. department name for DEPARTMENT_RESOURCE, team name/id for TEAM_RESOURCE and so on.
        target:
          $ref: '#/components/schemas/CollectionPinnableTargets'
    FacetFilter:
      properties:
        fieldName:
          type: string
          example: owner
        values:
          type: array
          items:
            $ref: '#/components/schemas/FacetFilterValue'
          description: Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet.
        groupName:
          type: string
          example: Spreadsheet
          description: Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet.
      example:
        fieldName: type
        values:
          - value: Spreadsheet
            relationType: EQUALS
          - value: Presentation
            relationType: EQUALS
    ShortcutInsight:
      required:
        - shortcut
      properties:
        shortcut:
          $ref: '#/components/schemas/Shortcut'
        visitCount:
          $ref: '#/components/schemas/CountInfo'
        visitorCount:
          $ref: '#/components/schemas/CountInfo'
    UserActivityInsight:
      required:
        - user
        - activity
      properties:
        user:
          $ref: '#/components/schemas/Person'
        activity:
          type: string
          enum:
            - ALL
            - SEARCH
          description: Activity e.g. search, home page visit or all.
        lastActivityTimestamp:
          type: integer
          description: Unix timestamp of the last activity (in seconds since epoch UTC).
        activityCount:
          $ref: '#/components/schemas/CountInfo'
        activeDayCount:
          $ref: '#/components/schemas/CountInfo'
    ClusterGroup:
      required:
        - visibleCountHint
      properties:
        clusterType:
          $ref: '#/components/schemas/ClusterTypeEnum'
        clusteredResults:
          description: A list of results that should be displayed as associated with this result.
          type: array
          items: &ref_9
            type: object
            properties:
              SearchResult:
                type: object
                description: SearchResult object
        visibleCountHint:
          description: The default number of results to display before truncating and showing a "see more" link
          type: integer
      type: object
    ShortcutInsightsResponse:
      properties:
        lastLogTimestamp:
          type: integer
          description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
        shortcutInsights:
          type: array
          items:
            $ref: '#/components/schemas/ShortcutInsight'
          description: Insights for shortcuts.
        departments:
          type: array
          items:
            type: string
          description: list of departments applicable for shortcuts tab.
        minVisitorThreshold:
          type: integer
          description: Min threshold in number of visitors while populating results, otherwise 0.
    ContentInsightsResponse:
      properties:
        lastLogTimestamp:
          type: integer
          description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
        documentInsights:
          type: array
          items:
            $ref: '#/components/schemas/DocumentInsight'
          description: Insights for documents.
        departments:
          type: array
          items:
            type: string
          description: list of departments applicable for contents tab.
        minDepartmentSizeThreshold:
          type: integer
          description: Min threshold in size of departments while populating results, otherwise 0.
        minVisitorThreshold:
          type: integer
          description: Minimum number of visitors to a document required to be included in insights.
    QueryInsight:
      required:
        - query
      properties:
        clickCount:
          $ref: '#/components/schemas/CountInfo'
        query:
          description: The query string the information is about.
          type: string
        searchCount:
          $ref: '#/components/schemas/CountInfo'
        searchWithClickCount:
          $ref: '#/components/schemas/CountInfo'
        searchorCount:
          $ref: '#/components/schemas/CountInfo'
        similarQueries:
          description: list of similar queries to current one.
          type: array
          items:
            type: object
            properties:
              QueryInsight:
                type: object
                description: QueryInsight object
      type: object
    GleanAssistInsightsResponse:
      properties:
        lastLogTimestamp:
          type: integer
          description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
        activityInsights:
          type: array
          items:
            $ref: '#/components/schemas/UserActivityInsight'
          description: Insights for all active users with respect to set of actions.
        totalActiveUsers:
          type: integer
          description: Total number of active users in the requested period.
        datasourceInstances:
          type: array
          items:
            type: string
          description: List of datasource instances for which glean assist is enabled.
        departments:
          type: array
          items:
            type: string
          description: List of departments applicable for users tab.
    AiInsightsResponse:
      properties:
        lastLogTimestamp:
          type: integer
          description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
        assistantInsights:
          type: array
          items:
            $ref: '#/components/schemas/UserActivityInsight'
        totalActiveAssistantUsers:
          type: integer
          description: Total number of Active Assistant users (chat, summary, AIA) in requested period.
        totalChatMessages:
          type: integer
          description: Total number of Chat messages sent in requested period.
        totalAiSummarizations:
          type: integer
          description: Total number of AI Document Summarizations invoked in the requested period.
        totalAiAnswers:
          type: integer
          description: Total number of AI Answers generated in the requested period.
        totalUpvotes:
          type: integer
          description: Total number of Chat messages which received upvotes by the user.
        totalDownvotes:
          type: integer
          description: Total number of Chat messages which received downvotes by the user.
        totalGleanbotResponses:
          type: integer
          description: Total number of Gleanbot responses, both proactive and reactive.
        totalGleanbotResponsesShared:
          type: integer
          description: Total number of Gleanbot responses shared publicly (upvoted).
        totalGleanbotResponsesNotHelpful:
          type: integer
          description: Total number of Glean responses rejected as not helpful (downvoted).
        departments:
          type: array
          items:
            type: string
          description: list of departments applicable for users tab.
    DocumentInsight:
      required:
        - document
      properties:
        document:
          $ref: '#/components/schemas/Document'
        viewCount:
          $ref: '#/components/schemas/CountInfo'
        visitorCount:
          $ref: '#/components/schemas/CountInfo'
    PinDocumentMutableProperties:
      properties:
        queries:
          type: array
          description: The query strings for which the pinned result will show.
          items:
            type: string
        audienceFilters:
          type: array
          description: Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.
          items:
            $ref: '#/components/schemas/FacetFilter'
    QueryInsightsResponse:
      properties:
        lastLogTimestamp:
          type: integer
          description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
        queryInsights:
          type: array
          items:
            $ref: '#/components/schemas/QueryInsight'
          description: Insights for queries.
        lowPerformingQueryInsights:
          type: array
          items:
            $ref: '#/components/schemas/QueryInsight'
          description: Insights for low performing queries without good results.
        departments:
          type: array
          items:
            type: string
          description: list of departments applicable for queries tab.
        minVisitorThreshold:
          type: integer
          description: Min threshold in number of visitors while populating results, otherwise 0.
    UserInsightsResponse:
      properties:
        lastLogTimestamp:
          type: integer
          description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
        activityInsights:
          type: array
          items:
            $ref: '#/components/schemas/UserActivityInsight'
          description: Insights for all active users with respect to set of actions.
        inactiveInsights:
          type: array
          items:
            $ref: '#/components/schemas/UserActivityInsight'
          description: Insights for all in inactive users with respect to set of actions and time period. Activity count will be set to 0.
        totalTeammates:
          type: integer
          description: Total number of teammates that have logged in to the product, that are still valid teammates.
        totalActiveUsers:
          type: integer
          description: Total number of active users in the requested period.
        departments:
          type: array
          items:
            type: string
          description: list of departments applicable for users tab.
    AiAppsInsightsResponse:
      properties:
        lastLogTimestamp:
          type: integer
          description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
        aiAppInsights:
          type: array
          items:
            $ref: '#/components/schemas/UserActivityInsight'
        totalActiveUsers:
          type: integer
          description: Total number of active users on the Ai App in the requested period.
        actionCounts:
          $ref: '#/components/schemas/AiAppActionCounts'
        departments:
          type: array
          items:
            type: string
          description: list of departments applicable for users tab.
    Permissions:
      description: |-
        Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
        When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
      properties:
        canAdminSearch:
          type: boolean
          description: TODO--deprecate in favor of the read and write properties. True if the user has access to /adminsearch
        canAdminClientApiGlobalTokens:
          type: boolean
          description: TODO--deprecate in favor of the read and write properties. True if the user can administrate client API tokens with global scope
        canDlp:
          type: boolean
          description: TODO--deprecate in favor of the read and write properties. True if the user has access to data loss prevention (DLP) features
        read:
          $ref: '#/components/schemas/ReadPermissions'
        write:
          $ref: '#/components/schemas/WritePermissions'
        grant:
          $ref: '#/components/schemas/GrantPermissions'
        role:
          type: string
          description: The roleId of the canonical role a user has. The displayName is equal to the roleId.
        roles:
          type: array
          description: The roleIds of the roles a user has.
          items:
            type: string
    DownloadInsightsRequest:
      required:
        - categories
      properties:
        categories:
          type: array
          items:
            type: string
            enum:
              - AGENTS
              - AI
              - AI_APPS
              - ANNOUNCEMENTS
              - ANSWERS
              - COLLECTIONS
              - CONTENT
              - GLEAN_ASSIST
              - QUERIES
              - SHORTCUTS
              - USERS
          description: Categories of data requested. Request can include single or multiple types.
        departments:
          type: array
          items:
            type: string
          description: Departments that the data is requested for. If this is empty, corresponds to whole company.
        dayRange:
          $ref: '#/components/schemas/Period'
        aiAppRequestOptions:
          $ref: '#/components/schemas/InsightsAiAppRequestOptions'
        agentsRequestOptions:
          $ref: '#/components/schemas/InsightsAgentsRequestOptions'
    QuerySuggestion: &ref_8
      example:
        query: app:github type:pull author:mortimer
        label: Mortimer's PRs
        datasource: github
      required:
        - query
      properties:
        datasource:
          description: The datasource associated with the suggestion.
          type: string
        inputDetails:
          $ref: '#/components/schemas/SearchRequestInputDetails'
        label:
          description: A user-facing description to display for the suggestion.
          type: string
        missingTerm:
          description: A query term missing from the original query on which this suggestion is based.
          type: string
        query:
          description: The query being suggested (e.g. enforcing the missing term from the original query).
          type: string
        ranges:
          description: The bolded ranges within the query of the QuerySuggestion.
          type: array
          items: *ref_2
        requestOptions:
          $ref: '#/components/schemas/SearchRequestOptions'
        searchProviderInfo:
          $ref: '#/components/schemas/SearchProviderInfo'
          description: Information about the search provider that generated this suggestion.
      type: object
    CollectionPinnedMetadata:
      required:
        - pinnedCategories
        - eligibleCategoriesForPinning
      properties:
        existingPins:
          type: array
          items:
            $ref: '#/components/schemas/CollectionPinTarget'
          description: List of targets this Collection is pinned to.
        eligiblePins:
          type: array
          items:
            $ref: '#/components/schemas/CollectionPinMetadata'
          description: List of targets this Collection can be pinned to, excluding the targets this Collection is already pinned to. We also include Collection ID already is pinned to each eligible target, which will be 0 if the target has no pinned Collection.
    TextRange:
      description: A subsection of a given string to which some special formatting should be applied.
      required:
        - startIndex
      properties:
        document: &ref_6
          properties:
            connectorType:
              $ref: '#/components/schemas/ConnectorType'
            containerDocument: &ref_5
              type: object
              description: Document object
            content:
              $ref: '#/components/schemas/DocumentContent'
            datasource:
              description: The app or other repository type from which the document was extracted
              type: string
            docType:
              description: The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request).
              type: string
            id:
              description: The Glean Document ID.
              type: string
            metadata: *ref_4
            parentDocument: *ref_5
            sections:
              description: A list of content sub-sections in the document, e.g. text blocks with different headings in a Drive doc or Confluence page.
              type: array
              items:
                $ref: '#/components/schemas/DocumentSection'
            title:
              description: The title of the document.
              type: string
            url:
              description: A permalink for the document.
              type: string
          type: object
        endIndex:
          description: The exclusive end index of the range.
          type: integer
        startIndex:
          description: The inclusive start index of the range.
          type: integer
        type:
          enum:
            - BOLD
            - CITATION
            - HIGHLIGHT
            - LINK
          type: string
        url:
          description: The URL associated with the range, if applicable. For example, the linked URL for a LINK range.
          type: string
      type: object
    Document: *ref_6
    Customer: &ref_40
      required:
        - id
        - company
      properties:
        company:
          $ref: '#/components/schemas/Company'
        contractAnnualRevenue:
          description: Average contract annual revenue with that customer.
          format: double
          type: number
        documentCounts:
          $ref: '#/components/schemas/DocumentCounts'
        domains:
          description: Link to company's associated website domains.
          type: array
          items:
            type: string
        id:
          description: Unique identifier.
          type: string
        mergedCustomers:
          description: A list of Customers.
          type: array
          items:
            type: object
            properties:
              Customer:
                type: object
                description: Customer object
        metadata:
          $ref: '#/components/schemas/CustomerMetadata'
        notes:
          description: User facing (potentially generated) notes about company.
          example: CIO is interested in trying out the product.
          type: string
        poc:
          description: A list of POC for company.
          type: array
          items: *ref_7
        startDate:
          description: The date when the interaction with customer started.
          format: date
          type: string
      type: object
    RelatedDocuments:
      properties:
        associatedEntityId:
          description: Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)
          type: string
        documents:
          deprecated: true
          description: A truncated list of documents with this relation. TO BE DEPRECATED.
          type: array
          items: &ref_16
            type: object
            properties:
              Document:
                type: object
                description: Document object
        querySuggestion: *ref_8
        relation:
          description: How this document relates to the including entity.
          enum: &ref_17
            - ATTACHMENT
            - CANONICAL
            - CASE
            - contact
            - CONTACT
            - CONVERSATION_MESSAGES
            - EXPERT
            - FROM
            - HIGHLIGHT
            - opportunity
            - OPPORTUNITY
            - RECENT
            - SOURCE
            - TICKET
            - TRANSCRIPT
            - WITH
          type: string
          x-enumDescriptions: &ref_18
            CANONICAL: Canonical documents for the entity, such as overview docs, architecture docs elastic.
        results:
          description: A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken.
          type: array
          items: *ref_9
      type: object
    Team: &ref_47
      type: object
      properties:
        bannerUrl:
          description: A link to the team's banner photo.
          format: url
          type: string
        businessUnit:
          description: Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
          type: string
        canBeDeleted:
          default: true
          description: can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot
          type: boolean
        createdFrom:
          description: For teams created from docs, the doc title. Otherwise empty.
          type: string
        customFields:
          description: Customizable fields for additional team information.
          type: array
          items: &ref_12
            required: *ref_10
            properties:
              displayable:
                default: true
                description: Determines whether the client should display this custom field
                type: boolean
              label:
                description: A user-facing label for this field.
                type: string
              values:
                type: array
                items: *ref_11
            type: object
        datasource:
          description: the data source of the team, e.g. GDRIVE
          type: string
        datasourceProfiles:
          description: The datasource profiles of the team
          type: array
          items:
            $ref: '#/components/schemas/DatasourceProfile'
        department:
          description: An organizational unit where everyone has a similar task, e.g. `Engineering`.
          type: string
        description:
          description: A description of the team
          type: string
        emails:
          description: The emails for this team
          type: array
          items:
            $ref: '#/components/schemas/TeamEmail'
        externalLink:
          description: Link to a team page on the internet or your company's intranet
          format: uri
          type: string
        id:
          description: Unique identifier
          type: string
        lastUpdatedAt:
          description: when this team was last updated.
          format: date-time
          type: string
        loggingId:
          description: The logging id of the team used in scrubbed logs, client analytics, and metrics.
          type: string
        memberCount:
          description: Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)
          type: integer
        members:
          description: The members on this team
          type: array
          items:
            type: object
            properties:
              PersonToTeamRelationship:
                type: object
                description: PersonToTeamRelationship object
        name:
          description: Team name
          type: string
        photoUrl:
          description: A link to the team's photo.
          format: url
          type: string
        status:
          default: PROCESSED
          description: whether this team is fully processed or there are still unprocessed operations that'll affect it
          enum:
            - PROCESSED
            - QUEUED_FOR_CREATION
            - QUEUED_FOR_DELETION
          type: string
      required:
        - id
        - name
    SearchRequestOptions:
      required:
        - facetBucketSize
      properties:
        datasourceFilter:
          type: string
          description: Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
        datasourcesFilter:
          type: array
          items:
            type: string
          description: Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing.
        queryOverridesFacetFilters:
          type: boolean
          description: If true, the operators in the query are taken to override any operators in facetFilters in the case of conflict. This is used to correctly set rewrittenFacetFilters and rewrittenQuery.
        facetFilters:
          type: array
          items:
            $ref: '#/components/schemas/FacetFilter'
          description: A list of filters for the query. An AND is assumed between different facetFilters. For example, owner Sumeet and type Spreadsheet shows documents that are by Sumeet AND are Spreadsheets.
        facetFilterSets:
          type: array
          items:
            $ref: '#/components/schemas/FacetFilterSet'
          description: A list of facet filter sets that will be OR'ed together. SearchRequestOptions where both facetFilterSets and facetFilters set are considered as bad request. Callers should set only one of these fields.
        facetBucketFilter:
          $ref: '#/components/schemas/FacetBucketFilter'
        facetBucketSize:
          type: integer
          description: The maximum number of FacetBuckets to return in each FacetResult.
        defaultFacets:
          type: array
          items:
            type: string
          description: Facets for which FacetResults should be fetched and that don't apply to a particular datasource. If specified, these values will replace the standard default facets (last_updated_at, from, etc.). The requested facets will be returned alongside datasource-specific facets if searching a single datasource.
        authTokens:
          type: array
          description: Auth tokens which may be used for non-indexed, federated results (e.g. Gmail).
          items:
            $ref: '#/components/schemas/AuthToken'
        fetchAllDatasourceCounts:
          type: boolean
          description: Hints that the QE should return result counts (via the datasource facet result) for all supported datasources, rather than just those specified in the datasource[s]Filter
        responseHints:
          type: array
          description: Array of hints containing which fields should be populated in the response.
          items:
            type: string
            description: Hints for the response content.
            x-enumDescriptions:
              ALL_RESULT_COUNTS: Return result counts for each result set which has non-zero results, even when the request itself is limited to a subset.
              FACET_RESULTS: Return only facet results.
              QUERY_METADATA: Returns result counts for each result set which has non-zero results, as well as other information about the search such as suggested spelling corrections.
              RESULTS: Return search result documents.
              SPELLCHECK_METADATA: Return metadata pertaining to spellcheck results.
            enum:
              - ALL_RESULT_COUNTS
              - FACET_RESULTS
              - QUERY_METADATA
              - RESULTS
              - SPELLCHECK_METADATA
        timezoneOffset:
          type: integer
          description: The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
        disableSpellcheck:
          type: boolean
          description: Whether or not to disable spellcheck.
        disableQueryAutocorrect:
          type: boolean
          description: Disables automatic adjustment of the input query for spelling corrections or other reasons.
        returnLlmContentOverSnippets:
          type: boolean
          description: '[beta] Enables expanded content to be returned for LLM usage. The size of content per result returned should be modified using maxSnippetSize. Server may return less or more than what is specified in maxSnippetSize. For more details, https://docs.google.com/document/d/1CTOLSxWWT9WDEnHVLoCUaxbGYyXYP8kctPRF-RluSQY/edit. Requires sufficient permissions.'
        inclusions:
          $ref: '#/components/schemas/RestrictionFilters'
          description: A list of filters which restrict the search results to only the specified content.
        exclusions:
          $ref: '#/components/schemas/RestrictionFilters'
          description: A list of filters specifying content to avoid getting search results from. Exclusions take precendence over inclusions and other query parameters, such as search operators and search facets.
      example:
        datasourceFilter: JIRA
        datasourcesFilter:
          - JIRA
        queryOverridesFacetFilters: true
        facetFilters:
          - fieldName: fieldName
            values:
              - fieldValues
              - fieldValues
          - fieldName: fieldName
            values:
              - fieldValues
              - fieldValues
    InsightsResponse:
      properties:
        timeseries:
          type: array
          items:
            $ref: '#/components/schemas/LabeledCountInfo'
          description: List of timeseries to make charts (if applicable).
        users:
          $ref: '#/components/schemas/UserInsightsResponse'
        content:
          $ref: '#/components/schemas/ContentInsightsResponse'
        queries:
          $ref: '#/components/schemas/QueryInsightsResponse'
        collections:
          $ref: '#/components/schemas/ContentInsightsResponse'
        collectionsV2:
          $ref: '#/components/schemas/ContentInsightsResponse'
        shortcuts:
          $ref: '#/components/schemas/ShortcutInsightsResponse'
        announcements:
          $ref: '#/components/schemas/ContentInsightsResponse'
        answers:
          $ref: '#/components/schemas/ContentInsightsResponse'
        ai:
          $ref: '#/components/schemas/AiInsightsResponse'
        aiApps:
          $ref: '#/components/schemas/AiAppsInsightsResponse'
        gleanAssist:
          $ref: '#/components/schemas/GleanAssistInsightsResponse'
        departments:
          type: array
          items:
            type: string
          description: list of all departments.
    PersonMetadata: &ref_15
      example:
        department: Movies
        email: george@example.com
        location: Hollywood, CA
        phone: 6505551234
        photoUrl: https://example.com/george.jpg
        startDate: '2000-01-23'
        title: Actor
      properties:
        aliasEmails:
          description: Additional email addresses of this user beyond the primary, if any.
          type: array
          items:
            type: string
        badges:
          description: The badges that a user has earned over their lifetime.
          type: array
          items:
            $ref: '#/components/schemas/Badge'
        bannerUrl:
          description: The URL of the person's banner photo.
          format: url
          type: string
        bio:
          description: Short biography or mission statement of the employee.
          type: string
        businessUnit:
          description: Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
          type: string
        busyEvents:
          description: Intervals of busy time for this person, along with the type of event they're busy with.
          type: array
          items:
            $ref: '#/components/schemas/AnonymousEvent'
        customFields:
          description: User customizable fields for additional people information.
          type: array
          items: *ref_12
        datasourceProfile:
          description: List of profiles this user has in different datasources / tools that they use.
          type: array
          items:
            $ref: '#/components/schemas/DatasourceProfile'
        department:
          description: An organizational unit where everyone has a similar task, e.g. `Engineering`.
          type: string
        departmentCount:
          description: The number of people in this person's department.
          type: integer
        directReportsCount:
          description: The total number of people who directly report to this person, or 0
          type: integer
        email:
          description: The user's primary email address
          type: string
        endDate:
          description: If a former employee, the last date of employment.
          format: date
          type: string
        externalProfileLink:
          description: Link to a customer's internal profile page. This is set to '#' when no link is desired.
          type: string
        firstName:
          description: The first name of the person
          type: string
        inviteInfo: *ref_13
        isOrgRoot:
          description: Whether this person is a "root" node in their organization's hierarchy.
          type: boolean
        isSignedUp:
          description: Whether the user has signed into Glean at least once.
          type: boolean
        lastExtensionUse:
          description: The last time the user has used the Glean extension in ISO 8601 format.
          format: date-time
          type: string
        lastName:
          description: The last name of the person
          type: string
        location:
          description: User facing string representing the person's location.
          type: string
        loggingId:
          description: The logging id of the person used in scrubbed logs, tracking GA metrics.
          type: string
        managementChain:
          description: The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager.
          type: array
          items: *ref_7
        manager: *ref_3
        orgSizeCount:
          description: The total recursive size of the people reporting to this person, or 1
          type: integer
        peopleDistance:
          description: List of people and distances to those people from this person. Optionally with metadata.
          type: array
          items:
            $ref: '#/components/schemas/PersonDistance'
        permissions:
          $ref: '#/components/schemas/Permissions'
        phone:
          description: Phone number as a number string.
          type: string
        photoUrl:
          description: The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
          format: url
          type: string
        preferredName:
          description: The preferred name of the person, or a nickname.
          type: string
        profileBoolSettings:
          additionalProperties:
            type: boolean
          description: flag settings to indicate user profile settings for certain items
          type: object
        pronoun:
          description: She/her, He/his or other pronoun.
          type: string
        querySuggestions: *ref_14
        reports:
          type: array
          items: *ref_7
        socialNetwork:
          description: List of social network profiles.
          type: array
          items:
            $ref: '#/components/schemas/SocialNetwork'
        startDate:
          description: The date when the employee started.
          format: date
          type: string
        startDatePercentile:
          description: Percentage of the company that started strictly after this person. Between [0,100).
          format: float
          type: number
        structuredLocation:
          $ref: '#/components/schemas/StructuredLocation'
        teams:
          description: Info about the employee's team(s).
          type: array
          items:
            $ref: '#/components/schemas/PersonTeam'
        timezone:
          description: The timezone of the person. E.g. "Pacific Daylight Time".
          type: string
        timezoneOffset:
          description: The offset of the person's timezone in seconds from UTC.
          format: int64
          type: integer
        title:
          description: Job title.
          type: string
        type:
          enum:
            - FULL_TIME
            - CONTRACTOR
            - NON_EMPLOYEE
            - FORMER_EMPLOYEE
          example: FULL_TIME
          type: string
          x-enumDescriptions:
            FULL_TIME: The person is a current full-time employee of the company.
            CONTRACTOR: The person is a current contractor of the company.
            NON_EMPLOYEE: The person object represents a non-human actor such as a service or admin account.
            FORMER_EMPLOYEE: The person is a previous employee of the company.
        uneditedPhotoUrl:
          description: The original photo URL of the person's avatar before any edits they made are applied
          format: url
          type: string
      type: object
    Person: &ref_19
      example:
        name: George Clooney
        obfuscatedId: abc123
      required:
        - name
        - obfuscatedId
      properties:
        metadata: *ref_15
        name:
          description: The display name.
          type: string
        obfuscatedId:
          description: An opaque identifier that can be used to request metadata for a Person.
          type: string
        relatedDocuments:
          description: A list of documents related to this person.
          type: array
          items: &ref_43
            properties:
              associatedEntityId:
                description: Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)
                type: string
              documents:
                deprecated: true
                description: A truncated list of documents with this relation. TO BE DEPRECATED.
                type: array
                items: *ref_16
              querySuggestion: *ref_8
              relation:
                description: How this document relates to the including entity.
                enum: *ref_17
                type: string
                x-enumDescriptions: *ref_18
              results:
                description: A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken.
                type: array
                items: *ref_9
            type: object
      type: object
    CustomFieldValuePerson: &ref_20
      properties:
        person: *ref_19
      type: object
    AnswerLike:
      properties:
        createTime:
          description: The time the user liked the answer in ISO format (ISO 8601).
          format: date-time
          type: string
        user: *ref_19
      type: object
    PersonToTeamRelationship:
      description: Metadata about the relationship of a person to a team.
      required:
        - person
      type: object
      properties:
        customRelationshipStr:
          description: Displayed name for the relationship if relationship is set to `OTHER`.
          type: string
        joinDate:
          description: The team member's start date
          format: date-time
          type: string
        person: *ref_19
        relationship:
          default: MEMBER
          description: The team member's relationship to the team. This defaults to MEMBER if not set.
          enum:
            - MEMBER
            - MANAGER
            - LEAD
            - POINT_OF_CONTACT
            - OTHER
          type: string
    CalendarAttendee:
      required:
        - person
      properties:
        groupAttendees:
          description: If this attendee is a group, represents the list of individual attendees in the group.
          type: array
          items:
            type: object
            properties:
              CalendarAttendee:
                type: object
                description: CalendarAttendee object
        isInGroup:
          description: Whether or not this attendee is in a group. Needed temporarily at least to support both flat attendees and tree for compatibility.
          type: boolean
        isOrganizer:
          description: Whether or not this attendee is an organizer.
          type: boolean
        person: *ref_19
        responseStatus:
          enum:
            - ACCEPTED
            - DECLINED
            - NO_RESPONSE
            - TENTATIVE
          type: string
      type: object
    ChannelInviteInfo:
      description: Information regarding the invite status of a person for a particular channel.
      properties:
        channel:
          description: Channel through which the invite was sent
          $ref: '#/components/schemas/CommunicationChannel'
        inviteTime:
          description: The time this person was invited in ISO format (ISO 8601).
          format: date-time
          type: string
        inviter: *ref_19
        isAutoInvite:
          description: Bit that tracks if this invite was automatically sent or user-sent
          type: boolean
        reminderTime:
          description: The time this person was reminded in ISO format (ISO 8601) if a reminder was sent.
          format: date-time
          type: string
      type: object
    AnswerLikes: &ref_66
      required:
        - likedBy
        - likedByUser
        - numLikes
      properties:
        likedBy:
          type: array
          items:
            properties:
              createTime:
                description: The time the user liked the answer in ISO format (ISO 8601).
                format: date-time
                type: string
              user: *ref_19
            type: object
        likedByUser:
          description: Whether the user in context liked the answer.
          type: boolean
        numLikes:
          description: The total number of likes for the answer.
          type: integer
      type: object
    CustomFieldValue:
      oneOf:
        - $ref: '#/components/schemas/CustomFieldValueStr'
        - $ref: '#/components/schemas/CustomFieldValueHyperlink'
        - *ref_20
    UserRoleSpecification:
      required: &ref_21
        - role
      properties:
        group: &ref_22
          $ref: '#/components/schemas/Group'
        person: *ref_19
        role: &ref_23
          $ref: '#/components/schemas/UserRole'
        sourceDocumentSpec: &ref_24
          $ref: '#/components/schemas/DocumentSpec'
          description: The document spec of the object this role originates from. The object this role is included with will usually have the same information as this document spec, but if the role is inherited, then the document spec refers to the parent document that the role came from.
      type: object
    Share:
      description: Search endpoint will only fill out numDays ago since that's all we need to display shared badge; docmetadata endpoint will fill out all the fields so that we can display shared badge tooltip
      required: &ref_26
        - numDaysAgo
      properties:
        numDaysAgo:
          description: The number of days that has passed since the share happened
          type: integer
        sharer: *ref_19
        sharingDocument: *ref_6
      type: object
    Shortcut: &ref_33
      description: ShortcutMutableProperties object
      type: object
      properties:
        alias:
          description: canonical link text following go/ prefix where hyphen/underscore is removed.
          type: string
        roles:
          description: A list of user roles for the Go Link.
          type: array
          items: &ref_25
            required: *ref_21
            properties:
              group: *ref_22
              person: *ref_19
              role: *ref_23
              sourceDocumentSpec: *ref_24
            type: object
        title:
          description: Title for the Go Link
          type: string
      required:
        - inputAlias
    CustomEntity: &ref_39
      type: object
      properties:
        datasource:
          description: The datasource the custom entity is from.
          type: string
        id:
          description: Unique identifier.
          type: string
        metadata:
          $ref: '#/components/schemas/CustomEntityMetadata'
        objectType:
          description: The type of the entity. Interpretation is specific to each datasource
          type: string
        roles:
          description: A list of user roles for the custom entity explicitly granted by the owner.
          type: array
          items: *ref_25
        title:
          description: Title or name of the custom entity.
          type: string
    DocumentInteractions:
      properties:
        numComments:
          description: The count of comments (thread replies in the case of slack).
          type: integer
        numReactions:
          description: The count of reactions on the document.
          type: integer
        reactions:
          deprecated: true
          description: To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.
          type: array
          items:
            type: string
        reacts:
          type: array
          items:
            properties:
              count:
                description: The count of the reaction type on the document.
                type: integer
              reactedByViewer:
                description: Whether the user in context reacted with this type to the document.
                type: boolean
              reactors:
                type: array
                items: *ref_7
              type:
                type: string
            type: object
        shares:
          description: Describes instances of someone posting a link to this document in one of our indexed datasources.
          type: array
          items:
            description: Search endpoint will only fill out numDays ago since that's all we need to display shared badge; docmetadata endpoint will fill out all the fields so that we can display shared badge tooltip
            required: *ref_26
            properties:
              numDaysAgo:
                description: The number of days that has passed since the share happened
                type: integer
              sharer: *ref_19
              sharingDocument: *ref_6
            type: object
        visitorCount:
          $ref: '#/components/schemas/CountInfo'
      type: object
    Reminder: &ref_34
      required: &ref_35
        - assignee
        - remindAt
      properties:
        assignee: *ref_19
        createdAt:
          description: Unix timestamp for when the reminder was first created (in seconds since epoch UTC).
          type: integer
        reason:
          description: An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
          type: string
        remindAt:
          description: Unix timestamp for when the reminder should trigger (in seconds since epoch UTC).
          type: integer
        requestor: *ref_19
      type: object
    PinDocument:
      type: object
      properties:
        attribution: *ref_19
        audienceFilters:
          description: Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.
          type: array
          items:
            $ref: '#/components/schemas/FacetFilter'
        createTime:
          format: date-time
          type: string
        documentId:
          description: The document which should be a pinned result.
          type: string
        id:
          description: The opaque id of the pin.
          type: string
        updateTime:
          format: date-time
          type: string
        updatedBy: *ref_19
      required:
        - documentId
    AnswerBoardMutableProperties:
      type: object
      properties:
        addedRoles: &ref_27
          description: A list of added user roles for the Collection.
          type: array
          items: *ref_25
        audienceFilters: &ref_28
          description: Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
          type: array
          items:
            $ref: '#/components/schemas/FacetFilter'
        description: &ref_29
          description: A brief summary of the Collection's contents.
          type: string
        name: &ref_30
          description: The unique name of the Collection.
          type: string
        removedRoles: &ref_31
          description: A list of removed user roles for the Collection.
          type: array
          items: *ref_25
      required:
        - name
    CollectionBaseMutableProperties:
      required:
        - name
      properties:
        addedRoles: *ref_27
        audienceFilters: *ref_28
        description: *ref_29
        name: *ref_30
        removedRoles: *ref_31
      type: object
    CollectionMutableProperties:
      type: object
      properties:
        addedRoles: *ref_27
        audienceFilters: *ref_28
        description: *ref_29
        name: *ref_30
        removedRoles: *ref_31
        adminLocked: &ref_59
          description: Indicates whether edits are allowed for everyone or only admins.
          type: boolean
        allowedDatasource: &ref_60
          description: The datasource type this Collection can hold.
          type: string
        icon: &ref_61
          description: The emoji icon of this Collection.
          type: string
        parentId: &ref_62
          description: The parent of this Collection, or 0 if it's a top-level Collection.
          type: integer
        thumbnail: &ref_63
          $ref: '#/components/schemas/Thumbnail'
      required:
        - name
    CollectionItem:
      type: object
      properties:
        collection: *ref_32
        collectionId:
          description: The Collection ID of the Collection that this CollectionItem belongs in.
          type: integer
        createdAt:
          description: Unix timestamp for when the item was first added (in seconds since epoch UTC).
          format: date-time
          type: string
        createdBy: *ref_19
        document: *ref_6
        documentId:
          description: If this CollectionItem is indexed, the Glean Document ID of that document.
          type: string
        itemId:
          description: Unique identifier for the item within the Collection it belongs to.
          type: string
        itemType:
          enum: &ref_64
            - DOCUMENT
            - TEXT
            - URL
            - COLLECTION
          type: string
        shortcut: *ref_33
        url:
          description: The URL of this CollectionItem.
          type: string
      required:
        - collectionId
        - itemType
    AnswerMutableProperties:
      properties:
        addedRoles: &ref_49
          description: A list of user roles for the answer added by the owner.
          type: array
          items: *ref_25
        audienceFilters: &ref_50
          description: Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
          type: array
          items:
            $ref: '#/components/schemas/FacetFilter'
        boardId: &ref_51
          deprecated: true
          description: The parent board ID of this Answer, or 0 if it's a floating Answer. Adding Answers to Answer Boards is no longer permitted.
          type: integer
        bodyText: &ref_52
          description: The plain text answer to the question.
          example: From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.
          type: string
        question: &ref_53
          example: Why is the sky blue?
          type: string
        questionVariations: &ref_54
          description: Additional ways of phrasing this question.
          type: array
          items:
            type: string
        removedRoles: &ref_55
          description: A list of user roles for the answer removed by the owner.
          type: array
          items: *ref_25
        roles: &ref_56
          description: A list of roles for this answer explicitly granted by an owner, editor, or admin.
          type: array
          items: *ref_25
        sourceDocumentSpec: &ref_57
          $ref: '#/components/schemas/DocumentSpec'
        sourceType: &ref_58
          enum:
            - DOCUMENT
            - ASSISTANT
          type: string
      type: object
    AnswerBoard: &ref_37
      type: object
      properties:
        addedRoles: *ref_27
        audienceFilters: *ref_28
        description: *ref_29
        name: *ref_30
        removedRoles: *ref_31
        createTime:
          format: date-time
          type: string
        creator: *ref_19
        id:
          description: The unique ID of the Answer Board.
          type: integer
        itemCount:
          description: The number of items currently in the Answer Board. Separated from the actual items so we can grab the count without items.
          type: integer
        roles:
          description: A list of user roles for the Answer Board.
          type: array
          items: *ref_25
        updateTime:
          format: date-time
          type: string
        updatedBy: *ref_19
      required:
        - name
        - id
        - description
    Verification: &ref_67
      required:
        - state
      properties:
        metadata: &ref_36
          required:
            - documentId
          properties:
            candidateVerifiers:
              description: List of potential verifiers for the document e.g. old verifiers and/or users with view/edit permissions.
              type: array
              items: *ref_7
            document: *ref_6
            expirationTs:
              description: The unix timestamp of the verification expiration if applicable (in seconds since epoch UTC).
              type: integer
            lastReminder: *ref_34
            lastVerificationTs:
              description: The unix timestamp of the verification (in seconds since epoch UTC).
              type: integer
            lastVerifier: *ref_19
            reminders:
              description: Info about all outstanding verification reminders for the document if exists.
              type: array
              items:
                required: *ref_35
                properties:
                  assignee: *ref_19
                  createdAt:
                    description: Unix timestamp for when the reminder was first created (in seconds since epoch UTC).
                    type: integer
                  reason:
                    description: An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
                    type: string
                  remindAt:
                    description: Unix timestamp for when the reminder should trigger (in seconds since epoch UTC).
                    type: integer
                  requestor: *ref_19
                type: object
            visitorCount:
              description: Number of visitors to the document during included time periods.
              type: array
              items:
                $ref: '#/components/schemas/CountInfo'
          type: object
        state:
          description: The verification state for the document.
          enum:
            - UNVERIFIED
            - VERIFIED
            - DEPRECATED
          type: string
      type: object
    VerificationMetadata: *ref_36
    StructuredResult: &ref_48
      description: A single object that can support any object in the work graph. Only a single object will be populated.
      properties:
        answer:
          type: object
          description: Answer object
        answerBoard: *ref_37
        app: &ref_69
          $ref: '#/components/schemas/AppResult'
        code: *ref_38
        collection: *ref_32
        customEntity: *ref_39
        customer: *ref_40
        disambiguation: &ref_70
          $ref: '#/components/schemas/Disambiguation'
        document: *ref_6
        extractedQnA: *ref_41
        meeting: *ref_42
        person: *ref_19
        prominence:
          description: The level of visual distinction that should be given to a result.
          enum: &ref_71
            - HERO
            - PROMOTED
            - STANDARD
          type: string
          x-enumDescriptions: &ref_72
            HERO: A high-confidence result that should feature prominently on the page.
            PROMOTED: May not be the best result but should be given additional visual distinction.
            STANDARD: Should not be distinct from any other results.
        querySuggestions: *ref_14
        relatedDocuments:
          description: A list of documents related to this structured result.
          type: array
          items: *ref_43
        relatedQuestion: *ref_44
        shortcut: *ref_33
        snippets:
          description: Any snippets associated to the populated object.
          type: array
          items: &ref_73
            example: *ref_45
            required: *ref_46
            properties:
              mimeType:
                description: The mime type of the snippets, currently either text/plain or text/html.
                type: string
              ranges:
                description: The bolded ranges within text.
                type: array
                items: *ref_2
              snippet:
                description: A matching snippet from the document. Query term matches are marked by the unicode characters uE006 and uE007.
                type: string
              snippetTextOrdering:
                description: Used for sorting based off the snippet's location within all_snippetable_text
                type: integer
              text:
                description: A matching snippet from the document with no highlights.
                type: string
              url:
                description: A URL, generated based on availability, that links to the position of the snippet text or to the nearest header above the snippet text.
                type: string
            type: object
        source:
          description: Source context for this result. Possible values depend on the result type.
          enum: &ref_74
            - EXPERT_DETECTION
            - ENTITY_NLQ
          type: string
        team: *ref_47
        trackingToken:
          description: An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
          type: string
      type: object
    StructuredTextItem:
      properties:
        document: *ref_6
        link:
          example: https://en.wikipedia.org/wiki/Diffuse_sky_radiation
          type: string
        structuredResult: *ref_48
        text:
          example: Because its wavelengths are shorter, blue light is more strongly scattered than the longer-wavelength lights, red or green. Hence the result that when looking at the sky away from the direct incident sunlight, the human eye perceives the sky to be blue.
          type: string
      type: object
    StructuredText: &ref_65
      type: object
      properties:
        structuredList:
          description: An array of objects each of which contains either a string or a link which optionally corresponds to a document.
          type: array
          items:
            properties:
              document: *ref_6
              link:
                example: https://en.wikipedia.org/wiki/Diffuse_sky_radiation
                type: string
              structuredResult: *ref_48
              text:
                example: Because its wavelengths are shorter, blue light is more strongly scattered than the longer-wavelength lights, red or green. Hence the result that when looking at the sky away from the direct incident sunlight, the human eye perceives the sky to be blue.
                type: string
            type: object
    Answer: &ref_68
      type: object
      properties:
        addedRoles: *ref_49
        audienceFilters: *ref_50
        boardId: *ref_51
        bodyText: *ref_52
        question: *ref_53
        questionVariations: *ref_54
        removedRoles: *ref_55
        roles: *ref_56
        sourceDocumentSpec: *ref_57
        sourceType: *ref_58
        author: *ref_19
        board: *ref_37
        collections:
          description: The collections to which the answer belongs.
          type: array
          items:
            type: object
            properties:
              addedRoles: *ref_27
              audienceFilters: *ref_28
              description: *ref_29
              name: *ref_30
              removedRoles: *ref_31
              adminLocked: *ref_59
              allowedDatasource: *ref_60
              icon: *ref_61
              parentId: *ref_62
              thumbnail: *ref_63
              childCount:
                description: The number of children Collections. Separated from the actual children so we can grab the count without children.
                type: integer
              children:
                description: The children Collections of this Collection.
                type: array
                items:
                  type: object
                  properties:
                    Collection:
                      type: object
                      description: Collection object
              createTime:
                format: date-time
                type: string
              creator: *ref_19
              id:
                description: The unique ID of the Collection.
                type: integer
              itemCount:
                description: The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
                type: integer
              items:
                description: The items in this Collection.
                type: array
                items:
                  type: object
                  properties:
                    collection: *ref_32
                    collectionId:
                      description: The Collection ID of the Collection that this CollectionItem belongs in.
                      type: integer
                    createdAt:
                      description: Unix timestamp for when the item was first added (in seconds since epoch UTC).
                      format: date-time
                      type: string
                    createdBy: *ref_19
                    document: *ref_6
                    documentId:
                      description: If this CollectionItem is indexed, the Glean Document ID of that document.
                      type: string
                    itemId:
                      description: Unique identifier for the item within the Collection it belongs to.
                      type: string
                    itemType:
                      enum: *ref_64
                      type: string
                    shortcut: *ref_33
                    url:
                      description: The URL of this CollectionItem.
                      type: string
                  required:
                    - collectionId
                    - itemType
              pinMetadata:
                $ref: '#/components/schemas/CollectionPinnedMetadata'
                description: Metadata having what categories this Collection is pinned to and the eligible categories to pin to
              roles:
                description: A list of user roles for the Collection.
                type: array
                items: *ref_25
              shortcuts:
                description: The names of the shortcuts (Go Links) that point to this Collection.
                type: array
                items:
                  type: string
              updateTime:
                format: date-time
                type: string
              updatedBy: *ref_19
            required:
              - name
              - id
              - description
        combinedAnswerText: *ref_65
        createTime:
          description: The time the answer was created in ISO format (ISO 8601).
          format: date-time
          type: string
        documentCategory:
          description: The document's document_category(.proto).
          type: string
        likes: *ref_66
        sourceDocument: *ref_6
        updateTime:
          description: The time the answer was last updated in ISO format (ISO 8601).
          format: date-time
          type: string
        updatedBy: *ref_19
        verification: *ref_67
      required:
        - id
    Result:
      properties:
        structuredResults:
          description: An array of entities in the work graph retrieved via a data request.
          type: array
          items:
            description: A single object that can support any object in the work graph. Only a single object will be populated.
            properties:
              answer: *ref_68
              answerBoard: *ref_37
              app: *ref_69
              code: *ref_38
              collection: *ref_32
              customEntity: *ref_39
              customer: *ref_40
              disambiguation: *ref_70
              document: *ref_6
              extractedQnA: *ref_41
              meeting: *ref_42
              person: *ref_19
              prominence:
                description: The level of visual distinction that should be given to a result.
                enum: *ref_71
                type: string
                x-enumDescriptions: *ref_72
              querySuggestions: *ref_14
              relatedDocuments:
                description: A list of documents related to this structured result.
                type: array
                items: *ref_43
              relatedQuestion: *ref_44
              shortcut: *ref_33
              snippets:
                description: Any snippets associated to the populated object.
                type: array
                items: *ref_73
              source:
                description: Source context for this result. Possible values depend on the result type.
                enum: *ref_74
                type: string
              team: *ref_47
              trackingToken:
                description: An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
                type: string
            type: object
        trackingToken:
          description: An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
          type: string
      type: object
  securitySchemes:
    APIToken:
      scheme: bearer
      type: http
